@charset "UTF-8";
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent displaying `audio` without controls in Mobile Safari 4/5/6/7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address inconsistent styling of `abbr[title]`.
 * 1. Correct styling in Firefox 39 and Opera 12.
 * 2. Correct missing styling in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Address inconsistent styling of b and strong.
 * 1. Correct duplicate application of `bolder` in Safari 6.0.2.
 * 2. Correct style set to `bold` in Edge 12+, Safari 6.2+, and Chrome 18+.
 */
b,
strong {
  font-weight: inherit;
  /* 1 */
}

b,
strong {
  font-weight: bolder;
  /* 2 */
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address inconsistent styling of `hr`.
 * 1. Correct `box-sizing` set to `border-box` in Firefox.
 * 2. Correct `overflow` set to `hidden` in IE 8/9/10/11 and Edge 12.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * 1. Correct inheritance and scaling of font-size for preformatted text.
 * 2. Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct font properties not being inherited.
 * 2. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Restore focus style in Firefox 4+ (unset by a rule above)
 */
button:-moz-focusring,
input:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Address `appearance` set to `searchfield` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Restore font weight (unset by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

body {
  color: #333;
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  font-feature-settings: "kern", "liga", "pnum";
  font-size: 16px;
  font-size: 1rem;
  line-height: 32px;
  line-height: 2rem;
}

h1 {
  font-size: 48.82812px;
  font-size: 3.05176rem;
}

@media screen and (min-width: 49.1875em) {
  h1 {
    font-size: 61.03516px;
    font-size: 3.8147rem;
  }
}

h2 {
  font-size: 39.0625px;
  font-size: 2.44141rem;
}

@media screen and (min-width: 49.1875em) {
  h2 {
    font-size: 48.82812px;
    font-size: 3.05176rem;
  }
}

h3 {
  font-size: 31.25px;
  font-size: 1.95312rem;
}

@media screen and (min-width: 49.1875em) {
  h3 {
    font-size: 39.0625px;
    font-size: 2.44141rem;
  }
}

h4 {
  font-size: 25px;
  font-size: 1.5625rem;
}

@media screen and (min-width: 49.1875em) {
  h4 {
    font-size: 31.25px;
    font-size: 1.95312rem;
  }
}

h5 {
  font-size: 20px;
  font-size: 1.25rem;
}

@media screen and (min-width: 49.1875em) {
  h5 {
    font-size: 25px;
    font-size: 1.5625rem;
  }
}

h6 {
  font-size: 16px;
  font-size: 1rem;
}

@media screen and (min-width: 49.1875em) {
  h6 {
    font-size: 20px;
    font-size: 1.25rem;
  }
}

p {
  font-size: 12.8px;
  font-size: 0.8rem;
}

@media screen and (min-width: 49.1875em) {
  p {
    font-size: 16px;
    font-size: 1rem;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Verdana", "Geneva", sans-serif;
  line-height: 64px;
  line-height: 4rem;
  margin-top: 64px;
  margin-top: 4rem;
  margin-bottom: 32px;
  margin-bottom: 2rem;
}

h1 + h2 {
  margin-top: 32px;
  margin-top: 2rem;
}

h2 + h3,
h3 + h4,
h4 + h5 {
  margin-top: 16px;
  margin-top: 1rem;
}

h5 + h6 {
  margin-top: -16px;
  margin-top: -1rem;
}

p {
  margin-bottom: 32px;
  margin-bottom: 2rem;
}

a {
  color: #477dca;
  text-decoration: none;
  transition: color 150ms ease;
}

a:active,
a:focus,
a:hover {
  color: #355e98;
}

hr {
  border-bottom: 1px solid #ddd;
  border-left: 0;
  border-right: 0;
  border-top: 0;
  margin-top: 32px;
  margin-top: 2rem;
  margin-bottom: 32px;
  margin-bottom: 2rem;
}

strong {
  font-weight: 700;
}

em {
  font-style: italic;
}

img,
picture {
  margin: 0;
  max-width: 100%;
}

@media screen and (min-width: 30em) {
  body {
    width: 100%;
    padding: 8px;
  }
}

@media screen and (min-width: 49.1875em) {
  body {
    width: -webkit-calc(83.33333% - 2em);
    width: -moz-calc(83.33333% - 2em);
    width: calc(83.33333% - 2em);
    padding: 0;
    margin-left: 8.33333%;
  }
}

@media screen and (min-width: 75em) {
  body {
    width: -webkit-calc(66.66667% - 2em);
    width: -moz-calc(66.66667% - 2em);
    width: calc(66.66667% - 2em);
    margin-left: 16.66667%;
  }
}

table {
  border-collapse: collapse;
  font-feature-settings: "kern", "liga", "tnum";
  margin: 1em 0;
  table-layout: fixed;
  width: 100%;
}

th {
  border-bottom: 1px solid #a6a6a6;
  font-weight: 600;
  padding: 1em 0;
  text-align: left;
}

td {
  border-bottom: 1px solid #ddd;
  padding: 1em 0;
}

tr,
td,
th {
  vertical-align: middle;
}

fieldset {
  background-color: #f7f7f7;
  border: 1px solid #ddd;
  margin: 0 0 1em;
  padding: 2em;
  border-radius: 0.25em;
}

input,
label,
select {
  display: block;
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  font-size: 100;
}

label {
  font-weight: 600;
  margin-bottom: 0.5em;
}

label.required::after {
  content: "*";
}

label abbr {
  display: none;
}

input[type="color"], input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="email"], input[type="month"], input[type="number"], input[type="password"], input[type="search"], input[type="tel"], input[type="text"], input[type="time"], input[type="url"], input[type="week"], input:not([type]), textarea,
select[multiple=multiple] {
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 0.5em;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.06);
  box-sizing: border-box;
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  font-size: 100;
  margin-bottom: 1em;
  padding: 0.66667em;
  transition: border-color 150ms ease;
  width: 100%;
}

input[type="color"]:hover, input[type="date"]:hover, input[type="datetime"]:hover, input[type="datetime-local"]:hover, input[type="email"]:hover, input[type="month"]:hover, input[type="number"]:hover, input[type="password"]:hover, input[type="search"]:hover, input[type="tel"]:hover, input[type="text"]:hover, input[type="time"]:hover, input[type="url"]:hover, input[type="week"]:hover, input:not([type]):hover, textarea:hover,
select[multiple=multiple]:hover {
  border-color: #b1b1b1;
}

input[type="color"]:focus, input[type="date"]:focus, input[type="datetime"]:focus, input[type="datetime-local"]:focus, input[type="email"]:focus, input[type="month"]:focus, input[type="number"]:focus, input[type="password"]:focus, input[type="search"]:focus, input[type="tel"]:focus, input[type="text"]:focus, input[type="time"]:focus, input[type="url"]:focus, input[type="week"]:focus, input:not([type]):focus, textarea:focus,
select[multiple=multiple]:focus {
  border-color: #477dca;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.06), 0 0 5px rgba(55, 112, 192, 0.7);
  outline: none;
}

input[type="color"]:disabled, input[type="date"]:disabled, input[type="datetime"]:disabled, input[type="datetime-local"]:disabled, input[type="email"]:disabled, input[type="month"]:disabled, input[type="number"]:disabled, input[type="password"]:disabled, input[type="search"]:disabled, input[type="tel"]:disabled, input[type="text"]:disabled, input[type="time"]:disabled, input[type="url"]:disabled, input[type="week"]:disabled, input:not([type]):disabled, textarea:disabled,
select[multiple=multiple]:disabled {
  background-color: #f2f2f2;
  cursor: not-allowed;
}

input[type="color"]:disabled:hover, input[type="date"]:disabled:hover, input[type="datetime"]:disabled:hover, input[type="datetime-local"]:disabled:hover, input[type="email"]:disabled:hover, input[type="month"]:disabled:hover, input[type="number"]:disabled:hover, input[type="password"]:disabled:hover, input[type="search"]:disabled:hover, input[type="tel"]:disabled:hover, input[type="text"]:disabled:hover, input[type="time"]:disabled:hover, input[type="url"]:disabled:hover, input[type="week"]:disabled:hover, input:not([type]):disabled:hover, textarea:disabled:hover,
select[multiple=multiple]:disabled:hover {
  border: 1px solid #ddd;
}

textarea {
  resize: vertical;
}

input[type="search"] {
  appearance: none;
}

input[type="checkbox"],
input[type="radio"] {
  display: inline;
  margin-right: 0.5em;
}

input[type="file"] {
  margin-bottom: 1em;
  width: 100%;
}

select {
  margin-bottom: 2em;
  max-width: 100%;
  width: auto;
}

ul,
ol {
  list-style-type: none;
  margin: 0;
  padding: 0;
  margin-bottom: 1em;
  padding-left: 3.5em;
}

ul {
  list-style-type: disc;
}

ol {
  list-style-type: decimal;
}

dl {
  margin-bottom: 1em;
}

dl dt {
  font-weight: bold;
  margin-top: 1em;
}

dl dd {
  margin: 0;
}

pre {
  padding: 2em;
  overflow: scroll;
  color: #ddd;
  font-family: "Bitstream Vera Sans Mono", "Consolas", "Courier", monospace;
  background-color: #333;
}

button, input[type="button"], input[type="reset"], input[type="submit"] {
  appearance: none;
  background-color: #477dca;
  border: 0;
  border-radius: 0.5em;
  color: #fff;
  cursor: pointer;
  display: inline-block;
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  font-size: 100;
  -webkit-font-smoothing: antialiased;
  font-weight: 600;
  line-height: 1;
  padding: 1em 2em;
  text-decoration: none;
  transition: background-color 150ms ease;
  user-select: none;
  vertical-align: middle;
  white-space: nowrap;
}

button:hover,
button:focus, input[type="button"]:hover,
input[type="button"]:focus, input[type="reset"]:hover,
input[type="reset"]:focus, input[type="submit"]:hover,
input[type="submit"]:focus {
  background-color: #3964a2;
  color: #fff;
}

button:disabled, input[type="button"]:disabled, input[type="reset"]:disabled, input[type="submit"]:disabled {
  cursor: not-allowed;
  opacity: 0.5;
}

button:disabled:hover, input[type="button"]:disabled:hover, input[type="reset"]:disabled:hover, input[type="submit"]:disabled:hover {
  background-color: #477dca;
}

.navigation .navigation-menu-button {
  display: block;
  float: right;
  margin: 0;
  padding-top: 0.5em;
}

@media screen and (min-width: 30em) {
  .navigation .navigation-menu-button {
    display: none;
  }
}

.navigation .navigation-wrapper {
  position: relative;
}

.navigation .navigation-wrapper::after {
  clear: both;
  content: "";
  display: table;
}

.navigation .logo {
  float: left;
}

@media screen and (min-width: 30em) {
  .navigation .logo {
    float: none;
    text-align: center;
    display: block;
  }
}

@media screen and (min-width: 50em) {
  .navigation .logo {
    float: left;
  }
}

.navigation .logo img {
  max-height: 2em;
  padding-right: 1em;
}

.navigation nav {
  float: none;
}

@media screen and (min-width: 30em) {
  .navigation nav {
    float: left;
    text-align: center;
    line-height: 1.5em;
    padding-top: 0.3em;
  }
}

.navigation ul.navigation-menu {
  clear: both;
  display: none;
  margin: 0 auto;
  overflow: visible;
  padding: 0;
  width: 100%;
}

@media screen and (min-width: 30em) {
  .navigation ul.navigation-menu {
    display: block;
    margin: 0;
    padding: 0;
  }
}

.navigation ul.navigation-menu.show {
  display: block;
}

.navigation ul li.nav-link {
  display: block;
  text-align: right;
  width: 100%;
}

@media screen and (min-width: 30em) {
  .navigation ul li.nav-link {
    background: transparent;
    display: inline;
    text-decoration: none;
    width: auto;
  }
}

.navigation li.nav-link a {
  display: inline-block;
}

@media screen and (min-width: 50em) {
  .navigation li.nav-link a {
    padding-right: 1em;
  }
}

.hover-menu {
  overflow: visible;
  padding-right: 0;
}

@media screen and (min-width: 50em) {
  .hover-menu {
    position: relative;
  }
}

.hover-menu .hover-menu-item {
  left: 0;
  position: relative;
}

.hover-menu .hover-menu-item::after {
  content: "›";
  padding-left: 0.5em;
}

.hover-menu .submenu {
  display: none;
  margin: 0;
  padding-left: 0;
}

@media screen and (min-width: 50em) {
  .hover-menu .submenu {
    left: 0;
    position: absolute;
  }
}

.hover-menu .submenu li {
  display: block;
  padding-right: 0;
}

.hover-menu .submenu li a {
  display: inline-block;
  text-align: right;
  width: 100%;
}

@media screen and (min-width: 50em) {
  .hover-menu .submenu li a {
    text-align: left;
    width: 12em;
  }
}

@media screen and (min-width: 50em) {
  .hover-menu .submenu .submenu {
    left: 12em;
    top: 0;
  }
}

.hover-menu:focus > .submenu,
.hover-menu:hover > .submenu {
  display: block;
}

.sliding-panel-content {
  position: fixed;
  top: 0;
  right: auto;
  bottom: 0;
  left: 0;
  height: 100%;
  width: 220px;
  -webkit-transform: translateX(-220px);
  -moz-transform: translateX(-220px);
  -ms-transform: translateX(-220px);
  -o-transform: translateX(-220px);
  transform: translateX(-220px);
  -webkit-transition: all 0.25s linear;
  -moz-transition: all 0.25s linear;
  transition: all 0.25s linear;
  background: #fff;
  padding: 1em;
  -webkit-overflow-scrolling: touch;
  overflow-y: auto;
  z-index: 4001;
  opacity: 0;
}

.sliding-panel-content.is-visible {
  -webkit-transform: translateX(0);
  -moz-transform: translateX(0);
  -ms-transform: translateX(0);
  -o-transform: translateX(0);
  transform: translateX(0);
  opacity: 1;
}

.sliding-panel-fade-screen {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  -webkit-transition: all 0.15s ease-out 0s;
  -moz-transition: all 0.15s ease-out 0s;
  transition: all 0.15s ease-out 0s;
  background: #000;
  opacity: 0;
  visibility: hidden;
  z-index: 4000;
}

.sliding-panel-fade-screen.is-visible {
  opacity: 0.4;
  visibility: visible;
}

.sliding-panel-close {
  cursor: pointer;
  z-index: 4001;
}

.cards {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -moz-box-pack: justify;
  box-pack: justify;
  -webkit-justify-content: space-between;
  -moz-justify-content: space-between;
  -ms-justify-content: space-between;
  -o-justify-content: space-between;
  justify-content: space-between;
  -ms-flex-pack: justify;
}

.cards .card {
  -webkit-flex-basis: 15em;
  -moz-flex-basis: 15em;
  flex-basis: 15em;
  -ms-flex-preferred-size: 15em;
  -webkit-flex-grow: 1;
  -moz-flex-grow: 1;
  flex-grow: 1;
  -ms-flex-positive: 1;
  margin: 0 1em;
}

.cards .card-image {
  height: 15em;
  background: whitesmoke;
  overflow: hidden;
}

.cards .card-image img {
  width: 100%;
}

.modal label {
  cursor: pointer;
  font-weight: normal;
  margin-bottom: 0;
}

.modal .modal-state {
  display: none;
}

.modal .modal-fade-screen {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.85);
  opacity: 0;
  transition: opacity 0.25s ease;
  visibility: hidden;
  z-index: 99999;
}

@media screen and (min-width: 50em) {
  .modal .modal-fade-screen {
    padding-top: 10em;
  }
}

.modal .modal-bg {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  cursor: pointer;
}

.modal .modal-close {
  cursor: pointer;
}

.modal .modal-inner {
  background-color: #fff;
  margin: auto;
  max-height: 95%;
  overflow: auto;
  position: relative;
  top: 0.5em;
  transition: opacity 0.25s ease;
  width: 95%;
}

@media screen and (min-width: 30em) {
  .modal .modal-inner {
    max-height: 70%;
    width: 60%;
  }
}

@media screen and (min-width: 50em) {
  .modal .modal-inner {
    width: 50%;
  }
}

.modal .modal-state:checked + .modal-fade-screen {
  opacity: 1;
  visibility: visible;
}

.modal-open {
  overflow: hidden;
}

.modal-closed {
  overflow: auto;
}

.dropdown .dropdown-container {
  display: inline-block;
  position: relative;
  text-align: center;
}

.dropdown .dropdown-description {
  float: left;
  padding-right: 1em;
}

.dropdown .dropdown-button {
  cursor: pointer;
  float: right;
  position: relative;
}

.dropdown .dropdown-button:after {
  display: block;
  position: absolute;
}

.dropdown .dropdown-menu {
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
  cursor: pointer;
  display: none;
  overflow: show;
  position: absolute;
  text-align: left;
  top: 50px;
  width: 228px;
  z-index: 99999;
}

.dropdown .show-menu {
  display: block;
}

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
.facebook {
  background-image: url(../img/sprites.png);
  background-position: 0px -120px;
  width: 121px;
  height: 120px;
  display: inline-block;
  margin: 1em;
}

.github {
  background-image: url(../img/sprites.png);
  background-position: -149px 0px;
  width: 142px;
  height: 120px;
  display: inline-block;
  margin: 1em;
}

.twitter {
  background-image: url(../img/sprites.png);
  background-position: 0px 0px;
  width: 149px;
  height: 120px;
  display: inline-block;
  margin: 1em;
}

.youtube {
  background-image: url(../img/sprites.png);
  background-position: -121px -120px;
  width: 120px;
  height: 120px;
  display: inline-block;
  margin: 1em;
}

/*# sourceMappingURL=data:application/json;base64, */